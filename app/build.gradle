int minSdk = hasProperty('minSdk') ? minSdk.toInteger() : versions.minSdk
println "Actual minSdk = ${minSdk}"

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'hu.supercluster.paperwork'
//apply from: '../keystore.gradle'

//paperwork {
//    set = [
//            gitSha      : getSha(),
//            buildTime   : buildTime("dd-MM-yyyy HH:00:00 z", "UTC"),
//    ]
//}

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId config.appId
        minSdkVersion minSdk
        targetSdkVersion versions.targetSdk
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }

    signingConfigs {
        release
    }

    parseKeystoreProperties()

    buildTypes {
        debug {
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }

        release {
            // will be enabled in future
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        // directory, which contains plain unit test
        test.java.srcDir 'src/unitTest/java'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // adjust lint to fail early
    lintOptions {
        warningsAsErrors true
        abortOnError true
    }
}

dependencies {
    compile libraries.appCompat
    compile libraries.recyclerView
    compile libraries.cardView
    compile libraries.design

    compile libraries.rxJava
    compile libraries.rxAndroid
    compile libraries.rxBinding

    compile libraries.dagger
    apt libraries.daggerCompiler

    compile libraries.butterknife
    compile libraries.glide

    compile "com.pnikosis:materialish-progress:1.5"
    compile (libraries.dialogs) {
        transitive = true
    }

    debugCompile libraries.tinyDancer
    debugCompile libraries.stetho
    debugCompile libraries.leakCanary
    compile libraries.paperwork

    testCompile libraries.junit
    testCompile libraries.robolectric
    testCompile libraries.assertJ
    testCompile libraries.equalsVerifier
//    testCompile libraries.mockitoCore
}

def parseKeystoreProperties() {
    def properties = new Properties()
    def keystoreFile = new File('keystore.properties')

    if (keystoreFile.canRead()) {
        properties.load(new FileInputStream(keystoreFile))

        if (properties == null
                || !properties.containsKey('STORE_FILE')
                || !properties.containsKey('STORE_PASSWORD')
                || !properties.containsKey('KEY_ALIAS')
                || !properties.containsKey('KEY_PASSWORD')) {
            android.buildTypes.release.signingConfig = null
            println 'cannot parse keystore.properties'
            return;
        }

        android.signingConfigs.release.storeFile = file(properties['STORE_FILE'])
        android.signingConfigs.release.storePassword = properties['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = properties['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = properties['KEY_PASSWORD']
        println "keystore.properties was parsed successfully"
    } else {
        println "cannot find keystore.properties file"
        android.buildTypes.release.signingConfig = null
    }
}

retrolambda {
    jvmArgs '-noverify'
    javaVersion JavaVersion.VERSION_1_7
}